{"version":3,"sources":["serviceWorker.ts","api/api.tsx","app/appReducer.ts","utills/error-utills.ts","features/login/auth-reducer.ts","components/ButtonAppBar/ButtonAppBar.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/tasks-reducer.ts","features/TodolistsList/Todolist/todolists-reducer.ts","components/CheckBox/CheckboxComponent.tsx","features/TodolistsList/Todolist/Task/TaskWithRedux.tsx","features/TodolistsList/Todolist/TodolistWithRedux.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","app/AppWithRedux.tsx","features/login/Login.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","authAPI","formData","post","delete","get","todolistAPI","title","todolistId","put","taskId","model","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","handleServerAppError","dispatch","data","messages","length","handlerServerNetworkError","message","isLoggedIn","setIsLoggedIn","payload","ButtonAppBar","useDispatch","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","mr","Typography","variant","component","Button","onClick","getState","then","res","resultCode","catch","err","AddItemForm","memo","props","console","log","useState","setTitle","setError","addItem","trim","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","AddBox","className","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","updateTaskTC","todolistID","taskID","domainModel","extraArgument","task","tasks","find","t","id","Error","apiModel","description","priority","startDate","deadline","updateTaskAC","changeTodolistFilterAC","newFilter","setTodolistEntityStatusAC","newStatus","CheckboxComponent","checked","callback","Checkbox","TaskWithRedux","entityStatus","onClickHandler","useCallback","removeTaskAC","deleteTaskTC","onTitleChangeHandler","onChangeTaskStatusHandler","newIsDoneValue","Completed","New","TodolistWithRedux","todolist","tasksForTodolist","useSelector","state","addTask","taskTitle","item","removeTodolist","changeTodolistTitle","newTodolistTitle","updateTodolistTC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","filter","useEffect","todlistID","items","map","TodolistsList","todolists","auth","addTodolist","addTodolistTC","Container","fixed","style","marginTop","marginBottom","Grid","container","spacing","tl","Paper","elevation","padding","borderRadius","to","ROUTES","LOGIN","Alert","React","ref","ErrorSnackBar","app","handleClose","event","reason","isOpen","Stack","width","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","errors","email","test","password","initialValues","rememberMe","captcha","onSubmit","resetForm","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","AppWithRedux","basename","process","LinearProgress","path","element","NOT_FOUND","ALL","top","textAlign","CircularProgress","rootReducer","combineReducers","action","restTasks","stateCopy","forEach","store","legacy_createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cea43aab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\n\r\nconst axiosInstance = axios.create(\r\n    {\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n        withCredentials: true,\r\n        headers: {\r\n            'API-KEY': '4b505e77-20a4-4b88-91c9-9a97e6bfb421'\r\n        }\r\n    }\r\n);\r\n\r\n\r\n//API\r\nexport const authAPI = {\r\n    login(formData: LoginParamsType) {\r\n        return axiosInstance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId?: number }>>>('auth/login', formData)\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<ResponseType>('auth/login')\r\n    },\r\n    initializeApp() {\r\n        return axiosInstance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    }\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return axiosInstance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return axiosInstance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return axiosInstance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${todolistId}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return axiosInstance.get<RequestedTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return axiosInstance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return axiosInstance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdatedTaskType) {\r\n        return axiosInstance.put<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n\r\n//TYPES\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdatedTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldErrors: string[]\r\n    resultCode: number\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\nexport type RequestedTasksType = {\r\n    items: TaskType[]\r\n    error: string\r\n    totalCount: number\r\n}\r\n\r\n//ENUMS\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later\r\n}","import {AppThunk} from './store';\r\nimport {authAPI} from '../api/api';\r\nimport {handlerServerNetworkError, handleServerAppError} from '../utills/error-utills';\r\nimport {setIsLoggedIn} from '../features/login/auth-reducer';\r\n\r\nexport type AppInitialStateType = {\r\n    status: RequestedStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type RequestedStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nconst initialState: AppInitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-APP-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestedStatusType) => ({type: 'APP/SET-APP-STATUS', status} as const);\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-APP-ERROR', error} as const);\r\nexport const setIsInitialized = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const);\r\n\r\nexport const initializeAppTC = (): AppThunk => (dispatch, getState, extraArgument) => {\r\n    authAPI.initializeApp()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true));\r\n                dispatch( setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data);\r\n            }\r\n            dispatch(setIsInitialized(true));\r\n        })\r\n        .catch((err:any) => {\r\n            handlerServerNetworkError(dispatch, err)\r\n        });\r\n}\r\n\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitialized>;\r\n\r\ntype AppActionsType = SetAppStatusACType | SetAppErrorACType | SetIsInitializedActionType;\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/appReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/api';\r\n\r\nexport const handleServerAppError = <D>(dispatch: Dispatch, data: ResponseType<D>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]));\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error!'));\r\n    }\r\n    dispatch(setAppStatusAC('failed'));\r\n}\r\n\r\nexport const handlerServerNetworkError = (dispatch: Dispatch, error: { message: string }) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'));\r\n    dispatch(setAppStatusAC('failed'));\r\n}","import {AppThunk} from '../../app/store';\r\nimport {authAPI, LoginParamsType} from '../../api/api';\r\nimport {handlerServerNetworkError, handleServerAppError} from '../../utills/error-utills';\r\nimport {setAppStatusAC} from '../../app/appReducer';\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n};\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.payload.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//action creators\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) =>\r\n    ({type: 'AUTH/SET-IS-LOGGED-IN', payload: {isLoggedIn}} as const);\r\n\r\n\r\n//thunk creators\r\nexport const loginTC = (formData: LoginParamsType): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.login(formData)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handlerServerNetworkError(dispatch, err);\r\n        })\r\n}\r\n\r\nexport const logoutTC = (): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch(err => {\r\n            handlerServerNetworkError(dispatch, err);\r\n        })\r\n}\r\n\r\n\r\n//TYPES\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n};\r\n\r\ntype SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>;\r\ntype AuthActionsType = SetIsLoggedInActionType","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {useDispatch} from 'react-redux';\r\nimport {logoutTC} from '../../features/login/auth-reducer';\r\n\r\nexport function ButtonAppBar() {\r\n    const dispatch = useDispatch();\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC());\r\n    }\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = memo((props: AddItemFormPropsType) => {\r\n        console.log('Rerender')\r\n        let [title, setTitle] = useState('')\r\n        let [error, setError] = useState<string | null>(null)\r\n\r\n        const addItem = () => {\r\n            if (title.trim() !== '') {\r\n                props.addItem(title);\r\n                setTitle('');\r\n            } else {\r\n                setError('Title is required');\r\n            }\r\n        }\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setTitle(e.currentTarget.value)\r\n        }\r\n\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            error && setError(null);\r\n            if (e.charCode === 13) {\r\n                addItem();\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField variant=\"outlined\"\r\n                       error={!!error}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={props.disabled}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    }\r\n)","import React, {ChangeEvent, memo, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.disabled}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import {AddTodolistType, RemoveTodolistType, SetTodolistsACType} from './todolists-reducer';\r\nimport {TasksStateType} from '../../../app/AppWithRedux';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdatedTaskType} from '../../../api/api';\r\nimport {AppThunk} from '../../../app/store';\r\nimport {setAppStatusAC} from '../../../app/appReducer';\r\nimport {handlerServerNetworkError, handleServerAppError} from '../../../utills/error-utills';\r\nimport {AxiosError} from 'axios';\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: CzarType) => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(t => t.id !== action.payload.taskID)\r\n            }\r\n        case 'TASKS/ADD-TASK':\r\n            return {...state, [action.payload.todolistId]: [action.payload.task, ...state[action.payload.todolistId]]}\r\n        case 'TASKS/UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t => t.id === action.payload.taskID ? {\r\n                    ...t, ...action.payload.model\r\n                } : t)\r\n            }\r\n        case 'TODOLIST/ADD-TODOLIST':\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case 'TODOLIST/REMOVE-TODOLIST':\r\n            const {[action.payload.todolistId]: [], ...restTasks} = {...state} //через деструктуризацию\r\n            return restTasks\r\n        case 'TODOLIST/SET-TODOLISTS':\r\n            let stateCopy = {...state};\r\n            action.payload.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        case 'TASKS/SET-TASKS':\r\n            return {...state, [action.payload.todolistId]: action.payload.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//ACTION CREATORS\r\nexport const removeTaskAC = (todolistId: string, taskID: string) =>\r\n    ({type: 'TASKS/REMOVE-TASK', payload: {todolistId, taskID}} as const)\r\n\r\nexport const addTaskAC = (todolistId: string, task: TaskType) =>\r\n    ({type: 'TASKS/ADD-TASK', payload: {todolistId, task}} as const)\r\n\r\nexport const updateTaskAC = (todolistId: string, taskID: string, model: UpdateTaskModelDomainType) =>\r\n    ({type: 'TASKS/UPDATE-TASK', payload: {todolistId, taskID, model}} as const)\r\n\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) =>\r\n    ({type: 'TASKS/SET-TASKS', payload: {todolistId, tasks}} as const)\r\n\r\n\r\n//THUNK CREATORS\r\nexport const requestedTasksTC = (todlistID: string): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.getTasks(todlistID)\r\n        .then(res => {\r\n            dispatch(setTasksAC(todlistID, res.data.items));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistID: string, taskTitle: string): AppThunk => (dispatch, getState, extraArgument) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.createTask(todolistID, taskTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(todolistID, res.data.data.item));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handlerServerNetworkError(dispatch, error);\r\n        })\r\n}\r\n\r\nexport const deleteTaskTC = (todolistID: string, taskID: string): AppThunk => (dispatch, getState, extraArgument) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.deleteTask(todolistID, taskID)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(todolistID, taskID));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n}\r\n//обновляем поля Таски, передавая обьект домейн модел со всеми необязательными свойствами, здесь будут поля статус и тайтл\r\nexport const updateTaskTC = (todolistID: string, taskID: string, domainModel: UpdateTaskModelDomainType): AppThunk =>\r\n    (dispatch, getState, extraArgument) => {\r\n        let task = getState().tasks[todolistID].find(t => t.id === taskID);\r\n        if (!task) {\r\n            throw new Error('Task is not found in state');\r\n            return;\r\n        }\r\n        //создаем объект, в который полностью копируем поля таски из текущего стейта и перезаписываем нашим доменым объектом нужное свойство\r\n        const apiModel: UpdatedTaskType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistAPI.updateTask(todolistID, taskID, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistID, taskID, domainModel));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handlerServerNetworkError(dispatch, error);\r\n            })\r\n    }\r\n\r\n//TYPES\r\ntype UpdateTaskModelDomainType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type RemoveTaskACType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskACType = ReturnType<typeof addTaskAC>\r\nexport type UpdateTaskACType = ReturnType<typeof updateTaskAC>\r\nexport type SetTasksACType = ReturnType<typeof setTasksAC>\r\nexport type CzarType =\r\n    RemoveTaskACType\r\n    | AddTaskACType\r\n    | UpdateTaskACType\r\n    | AddTodolistType\r\n    | RemoveTodolistType\r\n    | SetTodolistsACType\r\n    | SetTasksACType\r\n\r\n","import {FilterValuesType, TodolistDomainType} from '../../../app/AppWithRedux';\r\nimport {todolistAPI, TodolistType} from '../../../api/api';\r\nimport {AppThunk} from '../../../app/store';\r\nimport {RequestedStatusType, setAppStatusAC} from '../../../app/appReducer';\r\nimport {handlerServerNetworkError, handleServerAppError} from '../../../utills/error-utills';\r\nimport {AxiosError} from 'axios';\r\n\r\nlet initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: CzarType) => {\r\n    switch (action.type) {\r\n        case 'TODOLIST/REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.payload.todolistId);\r\n        case 'TODOLIST/ADD-TODOLIST':\r\n            return [...state, {...action.payload.todolist, filter: 'all'}]\r\n        case 'TODOLIST/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                title: action.payload.newTodolistTitle\r\n            } : tl);\r\n        case 'TODOLIST/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                filter: action.payload.newFilter\r\n            } : tl);\r\n        case 'TODOLIST/SET-TODOLISTS':\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'All'}));\r\n        case 'TODOLIST/SET-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.payload.todolistId ? {\r\n                ...tl,\r\n                entityStatus: action.payload.newStatus\r\n            } : tl);\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//ACTION CREATORS\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'TODOLIST/REMOVE-TODOLIST', payload: {todolistId}} as const);\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'TODOLIST/ADD-TODOLIST', payload: {todolist}} as const)\r\n\r\nexport const changeTodolistTitleAC = (todolistId: string, newTodolistTitle: string) =>\r\n    ({type: 'TODOLIST/CHANGE-TODOLIST-TITLE', payload: {todolistId, newTodolistTitle}} as const)\r\n\r\nexport const changeTodolistFilterAC = (todolistId: string, newFilter: FilterValuesType) =>\r\n    ({type: 'TODOLIST/CHANGE-TODOLIST-FILTER', payload: {todolistId, newFilter}} as const)\r\n\r\nexport const setTodolistsAC = (todolists: TodolistType[]) =>\r\n    ({type: 'TODOLIST/SET-TODOLISTS', payload: {todolists}} as const)\r\n\r\nexport const setTodolistEntityStatusAC = (todolistId: string, newStatus: RequestedStatusType) =>\r\n    ({type: 'TODOLIST/SET-TODOLIST-ENTITY-STATUS', payload: {todolistId, newStatus}} as const)\r\n\r\n\r\n//THUNK CREATORS\r\nexport const requestTodolistsTC = (): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error:AxiosError) => {\r\n            handlerServerNetworkError(dispatch, error);\r\n        })\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistID: string): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    dispatch(setTodolistEntityStatusAC(todolistID, 'loading'));\r\n    todolistAPI.deleteTodolist(todolistID)\r\n        .then(res => {\r\n            dispatch(removeTodolistAC(todolistID));\r\n            dispatch(setAppStatusAC('succeeded'));\r\n            dispatch(setTodolistEntityStatusAC(todolistID, 'succeeded'));\r\n        })\r\n}\r\n\r\nexport const updateTodolistTC = (todolistID: string, title: string): AppThunk => (dispatch, getState) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    todolistAPI.updateTodolist(todolistID, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistID, title));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error:AxiosError) => {\r\n            handlerServerNetworkError(dispatch, error);\r\n        })\r\n}\r\n\r\n\r\n//TYPES\r\nexport type RemoveTodolistType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistType = ReturnType<typeof addTodolistAC>\r\nexport type ChangeTodolistTitleType = ReturnType<typeof changeTodolistTitleAC>\r\nexport type ChangeTodolistFilterType = ReturnType<typeof changeTodolistFilterAC>\r\nexport type SetTodolistsACType = ReturnType<typeof setTodolistsAC>\r\nexport type SetTodolistEntityStatusACType = ReturnType<typeof setTodolistEntityStatusAC>\r\nexport type CzarType =\r\n    RemoveTodolistType\r\n    | AddTodolistType\r\n    | ChangeTodolistTitleType\r\n    | ChangeTodolistFilterType\r\n    | SetTodolistsACType\r\n    | SetTodolistEntityStatusACType\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox} from '@mui/material';\r\n\r\nexport type PropsType = {\r\n    checked: boolean\r\n    callback: (checked: boolean) => void\r\n}\r\n\r\nexport const CheckboxComponent = (props: PropsType) => {\r\n\r\n    const {checked, callback} = props\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        callback(e.currentTarget.checked)\r\n    }\r\n    return (\r\n        <Checkbox\r\n            checked={checked}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n    );\r\n};\r\n\r\n","import React, {memo, useCallback} from 'react';\r\nimport {CheckboxComponent} from '../../../../components/CheckBox/CheckboxComponent';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTaskTC, updateTaskTC} from '../tasks-reducer';\r\nimport {TaskStatuses, TaskType} from '../../../../api/api';\r\nimport {IconButton} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {RequestedStatusType} from '../../../../app/appReducer';\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    task: TaskType\r\n    entityStatus: RequestedStatusType\r\n}\r\n\r\nexport const TaskWithRedux = memo(({todolistID, task, entityStatus}: TaskPropsType) => {\r\n\r\n        const dispatch = useDispatch();\r\n        const onClickHandler = useCallback(() => {\r\n            dispatch(deleteTaskTC(todolistID, task.id))\r\n        }, [dispatch])\r\n        const onTitleChangeHandler = useCallback((title: string) => {\r\n            dispatch(updateTaskTC(todolistID, task.id, {title}));\r\n        }, [dispatch, todolistID, task.id])\r\n        const onChangeTaskStatusHandler = useCallback((newIsDoneValue: boolean) => {\r\n            let status = newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New\r\n            dispatch(updateTaskTC(todolistID, task.id, {status}));\r\n        }, [dispatch, todolistID, task.id]);\r\n\r\n        return (\r\n            <li key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n                <CheckboxComponent callback={onChangeTaskStatusHandler} checked={task.status === TaskStatuses.Completed}/>\r\n                <EditableSpan value={task.title} onChange={(value) => onTitleChangeHandler(value)}\r\n                              disabled={entityStatus === 'loading'}/>\r\n                <IconButton onClick={onClickHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        );\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n","import React, {memo, useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {TodolistDomainType} from '../../../app/AppWithRedux';\r\nimport {addTaskTC, requestedTasksTC} from './tasks-reducer';\r\nimport {changeTodolistFilterAC, deleteTodolistTC, updateTodolistTC} from './todolists-reducer';\r\nimport {IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {Button} from '@mui/material';\r\nimport {TaskStatuses, TaskType} from '../../../api/api';\r\nimport {TaskWithRedux} from './Task/TaskWithRedux';\r\n\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\n\r\nexport const TodolistWithRedux = memo(({todolist}: PropsType) => {\r\n        //забираем нужный тудулист через селектор в данной компоненте\r\n        //let todo = useSelector<AppRootStateType, TodolistType>(state => state.TodolistsList.find(todo=>todo.id===todolist.id) as TodolistType)\r\n\r\n        let tasksForTodolist = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[todolist.id]);\r\n        const dispatch = useDispatch();\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            dispatch(addTaskTC(todolist.id, title))\r\n        }, [todolist.id, dispatch])\r\n\r\n        const removeTodolist = useCallback(() => {\r\n            dispatch(deleteTodolistTC(todolist.id))\r\n        }, [todolist.id, dispatch]);\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => {\r\n            dispatch(updateTodolistTC(todolist.id, title));\r\n        }, [todolist.id, dispatch])\r\n\r\n\r\n        const onAllClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'all')), [dispatch]);\r\n        const onActiveClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'active')), [dispatch]);\r\n        const onCompletedClickHandler = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'completed')), [dispatch]);\r\n\r\n        if (todolist.filter === 'active') {\r\n            tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New)\r\n        } else if (todolist.filter === 'completed') {\r\n            tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed)\r\n        } else {\r\n            tasksForTodolist = tasksForTodolist\r\n        }\r\n\r\n        useEffect(() => {\r\n            dispatch(requestedTasksTC(todolist.id))\r\n        }, [todolist.id])\r\n        return <div>\r\n            <h3><EditableSpan value={todolist.title} onChange={changeTodolistTitle}\r\n                              disabled={todolist.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n\r\n                        return <TaskWithRedux\r\n                            todolistID={todolist.id}\r\n                            task={t}\r\n                            entityStatus={todolist.entityStatus}\r\n                        />\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button color={'success'} variant={todolist.filter === 'all' ? 'contained' : 'text'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={'primary'} variant={todolist.filter === 'active' ? 'contained' : 'text'}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'} variant={todolist.filter === 'completed' ? 'contained' : 'text'}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    }\r\n);\r\n\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Container, Grid, Paper} from '@mui/material';\r\nimport {TodolistWithRedux} from './Todolist/TodolistWithRedux';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {ROUTES, TodolistDomainType} from '../../app/AppWithRedux';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {addTodolistTC, requestTodolistsTC} from './Todolist/todolists-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const TodolistsList = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestTodolistsTC());\r\n    }, [])\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={ROUTES.LOGIN}/>\r\n    }\r\n    return (\r\n        <><Container fixed style={{marginTop: '2rem', marginBottom: '2rem'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Container>\r\n            <Grid container spacing={3}>{\r\n                todolists.map(tl => {\r\n                    return (<Grid item key={tl.id}>\r\n                        <Paper elevation={3} style={{padding: '10px', borderRadius: '0.5rem'}}>\r\n                            <TodolistWithRedux key={tl.id} todolist={tl}/>\r\n                        </Paper>\r\n                    </Grid>)\r\n                })\r\n            }</Grid></>\r\n    );\r\n}","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setAppErrorAC} from '../../app/appReducer';\r\nimport {AppRootStateType} from '../../app/store';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStateType, string|null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{width: '100%'}}>\r\n            <Snackbar open={isOpen} autoHideDuration={10000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                    {error ? error : \"Some error !\"}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TaskType, TodolistType} from '../api/api';\r\nimport {ButtonAppBar} from '../components/ButtonAppBar/ButtonAppBar';\r\nimport {Container} from '@mui/material';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {CircularProgress, LinearProgress} from '@material-ui/core';\r\nimport {ErrorSnackBar} from '../components/ErrorSnackBar/ErrorSnackBar';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestedStatusType} from './appReducer';\r\nimport {BrowserRouter, Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/login/Login';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport enum ROUTES {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404',\r\n    ALL = '*'\r\n}\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestedStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const status = useSelector<AppRootStateType, RequestedStatusType>(state => state.app.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <div className=\"App\">\r\n                <ErrorSnackBar/>\r\n                <ButtonAppBar/>\r\n                {status === 'loading' && <LinearProgress/>}\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={ROUTES.DEFAULT} element={<TodolistsList/>}/>\r\n                        <Route path={ROUTES.LOGIN} element={<Login/>}/>\r\n                        <Route path={ROUTES.NOT_FOUND} element={<h1>PAGE NOT FOUND</h1>}/>\r\n                        <Route path={ROUTES.ALL} element={<Navigate to={ROUTES.NOT_FOUND}/>}/>\r\n                    </Routes>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikErrors, useFormik} from 'formik';\r\nimport {LoginParamsType} from '../../api/api';\r\nimport {loginTC} from './auth-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {ROUTES} from '../../app/AppWithRedux';\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        validate: (values: LoginParamsType) => {\r\n            let errors: FormikErrors<LoginParamsType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required!'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!'\r\n            }\r\n            return errors\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    });\r\n    if (isLoggedIn) {\r\n        return <Navigate to={ROUTES.DEFAULT}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Grid item justifyContent={'center'}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField type=\"password\" label=\"Password\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>}\r\n                                          {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Grid>\r\n        </form>\r\n    </Grid>\r\n}","import {tasksReducer} from '../features/TodolistsList/Todolist/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer'\r\nimport {AnyAction, applyMiddleware, combineReducers, legacy_createStore} from 'redux'\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer} from './appReducer';\r\nimport {authReducer} from '../features/login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunkMiddleWare)\r\n)\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppThunk<T = void> = ThunkAction<T,\r\n    AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}